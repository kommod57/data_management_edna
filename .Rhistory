library(tree)
# Reload the dataset with correct types
data = read.csv("Characteristics.tsv")
r.version()
r.version
# Reload the dataset with correct types
data = read.tsv("Characteristics.tsv")
# Reload the dataset with correct types
data = read_tsv("Characteristics.tsv")
library(tidyverse)
# Reload the dataset with correct types
data = read_tsv("Characteristics.tsv")
# Ensure Phylum is a factor
data$Phylum <- as.factor(data$Phylum)
# Check structure again
str(data)
model1<-tree(Phylum ~ ., mindev=1e-6, minsize=2, data=data)
# Reload the dataset with correct types
data = read_tsv("Characteristics.tsv")
model1<-tree(Phylum ~ ., mindev=1e-6, minsize=2, data=data)
# Check structure again
str(data)
model1<-tree(Phylum, mindev=1e-6, minsize=2, data=data)
print(data)
model1<-tree(Phylum ~ ., mindev=1e-6, minsize=2, data=data)
summary(data)
# Reload the dataset with correct types
data = read_tsv("Characteristics.tsv")
# Ensure Phylum is a factor
data$Phylum <- as.factor(data$Phylum)
# Check if column names are correct
print(colnames(data))
# Fit the decision tree model
model1 <- tree(Phylum ~ ., mindev = 1e-6, minsize = 2, data = data)
# Fit the decision tree model
model1 <- tree(Phylum, mindev = 1e-6, minsize = 2, data = data)
# Fit the decision tree model
model1 <- tree(Phylum ~ "bilateral symmetry", mindev = 1e-6, minsize = 2, data = data)
# Fit the decision tree model
model1 <- tree(Phylum ~ `bilateral symmetry`, mindev = 1e-6, minsize = 2, data = data)
names(data
)
names(data) <- make.names(names(data), unique = TRUE)
# Fit the decision tree model
model1 <- tree(Phylum ~ `bilateral symmetry`, mindev = 1e-6, minsize = 2, data = data)
names(data) <- gsub(" ", "_", names(data))
names(data) <- make.names(names(data), unique = TRUE)
# Fit the decision tree model
model1 <- tree(Phylum ~ `bilateral symmetry`, mindev = 1e-6, minsize = 2, data = data)
# Fit the decision tree model
model1 <- tree(Phylum ~ `bilateral_symmetry`, mindev = 1e-6, minsize = 2, data = data)
# Fit the decision tree model
model1 <- tree(Phylum ~ ., mindev = 1e-6, minsize = 2, data = data)
# Reload the dataset with correct types
data = read_tsv("Characteristics.tsv")
# Ensure Phylum is a factor
data$Phylum <- as.factor(data$Phylum)
# Check if column names are correct
print(colnames(data))
# Ensure Phylum is a factor
data$Phylum <- as.factor(data$Phylum)
names(data) <- gsub(" ", "_", names(data))
# Check if column names are correct
print(colnames(data))
# Fit the decision tree model
model1 <- tree(Phylum ~ ., mindev = 1e-6, minsize = 2, data = data)
data <- na.omit(data)
names(data) <- gsub(" ", "_", names(data))
# Check if column names are correct
print(colnames(data))
# Fit the decision tree model
model1 <- tree(Phylum ~ ., mindev = 1e-6, minsize = 2, data = data)
dim(data)
str(data)
# Check if column names are correct
print(data)
str(data)
# Reload the dataset with correct types
data = read_tsv(file.choose())
str(data)
names(data) <- gsub(" ", "_", names(data))
# Check if column names are correct
# Fit the decision tree model
model1 <- tree(Phylum ~ ., mindev = 1e-6, minsize = 2, data = data)
# Reload the dataset with correct types
data = read_tsv(file.choose())
str(data)
# Check if column names are correct
# Fit the decision tree model
model1 <- tree(Phylum ~ ., mindev = 1e-6, minsize = 2, data = data)
# Reload the dataset with correct types
data = read_tsv(file.choose())
str(data)
data <- na.omit(data)
str(data)
# Reload the dataset with correct types
data = read_tsv(file.choose())
names(data) <- gsub(" ", "_", names(data))
# Check if column names are correct
# Fit the decision tree model
model1 <- tree(Phylum ~ ., mindev = 1e-6, minsize = 2, data = data)
str(data)
# Reload the dataset with correct types
data = read_tsv(file.choose())
names(data) <- gsub(" ", "_", names(data))
str(data)
data$`only sexual reproduction` <- as.numeric(data$`only sexual reproduction`)
# Reload the dataset with correct types
data = read_tsv(file.choose())
names(data) <- gsub(" ", "_", names(data))
str(data)
data$`only_sexual_reproduction` <- as.numeric(data$`only_sexual_reproduction`)
# You can choose to replace NAs with a default value, e.g., 0 or 1:
data$`only sexual reproduction`[is.na(data$`only_sexual_reproduction`)] <- 0
# Reload the dataset with correct types
data = read_tsv(file.choose())
names(data) <- gsub(" ", "_", names(data))
str(data)
data$`only_sexual_reproduction` <- as.numeric(data$`only_sexual_reproduction`)
# You can choose to replace NAs with a default value, e.g., 0 or 1:
data$`only_sexual_reproduction`[is.na(data$`only_sexual_reproduction`)] <- 0
data <- data[!is.na(data$Phylum), ]
# Check if column names are correct
# Fit the decision tree model
model1 <- tree(Phylum ~ ., mindev = 1e-6, minsize = 2, data = data)
library(tidyverse)
library(tree)
# Reload the dataset with correct types
data = read_tsv(file.choose())
data$Phylum <- as.factor(data$Phylum)
names(data) <- gsub(" ", "_", names(data))
str(data)
model1 <- tree(Phylum ~ ., mindev = 1e-6, minsize = 2, data = data)
# Reload the dataset with correct types
data = read_tsv(file.choose())
data$Phylum <- as.factor(data$Phylum)
names(data) <- gsub(" ", "_", names(data))
str(data)
model1 <- tree(Phylum ~ ., mindev = 1e-6, minsize = 2, data = data)
plot(model1)
text(model1)
